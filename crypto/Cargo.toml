[package]
name = "crypto"
version = "0.1.0"
edition = "2021"

[lib]
name = "crypto"
path = "src/lib.rs"
crate-type = ["cdylib", "rlib"]
#crate-type = ["lib"]

[features]
default = ["console_error_panic_hook"]

[dependencies]
wasm-bindgen = "0.2.82"

# The `console_error_panic_hook` crate provides better debugging of panics by
# logging them with `console.error`. This is great for development, but requires
# all the `std::fmt` and `std::panicking` infrastructure, so isn't great for
# code size when deploying.
console_error_panic_hook = { version = "0.1.7", optional = true }

# `wee_alloc` is a tiny allocator for wasm that is only ~1K in code size
# compared to the default allocator's ~10K. It is slower than the default
# allocator, however.
#
# Unfortunately, `wee_alloc` requires nightly Rust when targeting wasm for now.
wee_alloc = { version = "0.4.5", optional = true }




logger = { path = "../logger" } # Logger imported from https://github.com/DuarteSerranoR/info_disco_of_awesomeness
log = "0.4.14"
rand = "0.8.5"
getrandom = { version = "0.2.7", features = ["js"] }
base64 = "0.13.0"

# Crypto libs:

# article -> https://cure53.de/pentest-report_rust-libs_2022.pdf

# From the RustCrypto team -> most used, all of them go around the digest lib
# RustCrypto GitHub group, which aims to implement cryptography in pure Rust
#digest = "0.10.3" # https://crates.io/crates/digest / https://github.com/RustCrypto/traits
aead = "0.5.0" # https://github.com/RustCrypto/AEADs -> Authenticated Encryption with Associated Data
aes-gcm = "0.10.1" # https://github.com/RustCrypto/AEADs -> Authenticated Encryption with Associated Data
#crypto = "0.3.0" # https://crates.io/crates/crypto / https://github.com/RustCrypto
#cipher = "0.4.3" # https://crates.io/crates/cipher / https://github.com/RustCrypto

# xsalsa20poly1305 = "0.8.0" https://github.com/RustCrypto/AEADs/tree/master/xsalsa20poly1305
# crypto_box - "0.7.1"

# digest -> This is the main lib which contains all the work done by the RustCrypto team !!!!

# Older lib -> really low level and found it good to use if it would had been better supported, but no-one uses it nowadays. Also, had problems compiling!!
#rust-crypto = "0.2.36" # https://crates.io/crates/rust-crypto / https://github.com/DaGenix/rust-crypto/


# Export of the lib to TypeScript:
# an option instead of webassembly https://medium.com/@a7ul/using-rust-modules-for-javascript-web-development-part-3-3-nodejs-7c71e4ae23fe
# compile to c with -- crate-type = ["cdylib"] -- and import to nodejs with -- node-ffi --



[profile.release]
# Tell `rustc` to optimize for small code size.
opt-level = "s"

